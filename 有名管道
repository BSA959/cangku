#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <limits.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>

#define FIFO_NAME "/tmp/my_fifo"
#define BUFFER_SIZE PIPE_BUF

int main()
{
    int pipe_fd;
    int res;
    
    char buffer[BUFFER_SIZE + 1];
    //reset all bytes in buffer as '\0' 
    memset(buffer, '\0', sizeof(buffer));
    
    //open FIFO pipe file.
    //this will be brocked until some one open another end point(write-point) of this pipe
    pipe_fd = open(FIFO_NAME, O_RDONLY);
    
    if (pipe_fd != -1)
    {
        printf("data read from buffer : \n");
        
        //read all data from pipe file by BUFFER_SIZE each time
        do
        {
            res = read(pipe_fd, buffer, BUFFER_SIZE);
            if(res>0)
            {
                printf("%s", buffer);
                fflush(stdout);
            }
            
        }while(res > 0);
        
        //close pipe file descriptor
        close(pipe_fd);
    }
    else
    {
        exit(EXIT_FAILURE);
    }
    
    printf("\nProcess %d finish\n", getpid());
    exit(EXIT_SUCCESS);
}


















/*
 * process A: create FIFO and write data
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <limits.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#define FIFO_NAME "/tmp/my_fifo"

int main()
{
    int pipe_fd;
    
    //if the pipe file do not exist
    if (access(FIFO_NAME, F_OK) == -1)
    {
        //creat FIFO pipe file
        mkfifo(FIFO_NAME, 0777);
    }
    
    //open FIFO pipe file.
    //this will be brocked until some one open another end point(read-point) of this pipe
    pipe_fd = open(FIFO_NAME, O_WRONLY);
    
    //write data into pipe 
    write(pipe_fd, "hi, this is a test", PIPE_BUF);
    
    //close FIFO pipe file descriptor
    close(pipe_fd);
    
    return 0;
}

/*
 * process B: read data from FIFO
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <limits.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>

#define FIFO_NAME "/tmp/my_fifo"
#define BUFFER_SIZE PIPE_BUF

int main()
{
    int pipe_fd;
    
    char buffer[BUFFER_SIZE + 1];
    //reset all bytes in buffer as '\0' 
    memset(buffer, '\0', sizeof(buffer));
    
    //open FIFO pipe file.
    //this will be brocked until some one open another end point(write-point) of this pipe
    pipe_fd = open(FIFO_NAME, O_RDONLY);
    
    if(read(pipe_fd, buffer, BUFFER_SIZE) > 0)
    {
        printf("data from FIFO : %s\n", buffer);
    }
    
    //close pipe file descriptor
    close(pipe_fd);

    return 0;
}


